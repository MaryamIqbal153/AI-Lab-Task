# -*- coding: utf-8 -*-
"""LabTask3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZgcJUZ9I6YQ-2Ks7u-xKSyVYxlLeAQXT

**1. Import deque for efficient queue operations**
"""

from collections import deque

"""**Step 1: Represent the graph**"""

pakistan_cities = {
    'Karachi': ['Hyderabad'],
    'Hyderabad': ['Karachi', 'Sukkur'],
    'Sukkur': ['Hyderabad', 'Multan', 'Quetta'],
    'Multan': ['Sukkur', 'Lahore'],
    'Quetta': ['Sukkur'],
    'Lahore': ['Multan', 'Islamabad'],
    'Islamabad': ['Lahore', 'Peshawar'],
    'Peshawar': ['Islamabad']
}

"""**Step 2: BFS and DFS Implementation**

**Breadth First Search**
"""

def dfs_path(graph, start, goal, path=None, visited=None):


    "path starts as an empty list to record the route you take."
    if path is None:
        path = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited is None:
        visited = set()


    path.append(start)

    visited.add(start)


    if start == goal:
        return path


    for neighbor in graph.get(start, []):
        if neighbor not in visited:

            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())


            if result:
                return result


    return None


start_city = "Peshawar"
goal_city = "Multan"



bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Peshawar to Multan:", bfs_result)

"""**Depth First Search**"""

def dfs_path(graph, start, goal, path=None, visited=None):


    "path starts as an empty list to record the route you take."
    if path is None:
        path = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited is None:
        visited = set()


    path.append(start)

    visited.add(start)


    if start == goal:
        return path


    for neighbor in graph.get(start, []):
        if neighbor not in visited:

            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())


            if result:
                return result


    return None


start_city = "Peshawar"
goal_city = "Multan"

dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Peshawar to Multan:", dfs_result)